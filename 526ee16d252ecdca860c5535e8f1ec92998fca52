{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d1156ae5_b7bf19c8",
        "filename": "src/spdmd_app.cpp",
        "patchSetId": 4
      },
      "lineNbr": 15,
      "author": {
        "id": 1001516
      },
      "writtenOn": "2025-05-20T07:33:02Z",
      "side": 1,
      "message": "nit: I think these comments in this file can be removed. Since it\u0027s self explanatory.",
      "revId": "526ee16d252ecdca860c5535e8f1ec92998fca52",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0435466_287cf2cf",
        "filename": "src/spdmd_app.hpp",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-20T21:05:37Z",
      "side": 1,
      "message": "I have no idea why we got boost added here.  I\u0027m not accepting a new daemon in this repository using hand-spun boost::asio implementations.  Please see the sdbusplus::async support.",
      "revId": "526ee16d252ecdca860c5535e8f1ec92998fca52",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "694f9fbd_56ab4a88",
        "filename": "src/spdmd_app.hpp",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2025-05-21T10:45:11Z",
      "side": 1,
      "message": "Boost was integrated to support the ASIO-based implementation. If we plan to replace it with sdbusplus::async, does sdbusplus::async provide support for MCTP socket communication?\n\nIn MCTP-based communication with other devices, we rely on the in-kernel socket mechanism. From user space, we open the socket and perform I/O operations directly over it.",
      "parentUuid": "f0435466_287cf2cf",
      "revId": "526ee16d252ecdca860c5535e8f1ec92998fca52",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc251168_7e2aa397",
        "filename": "src/spdmd_app.hpp",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2025-05-21T10:52:18Z",
      "side": 1,
      "message": "Currently all the DMTF libspdm calls are blocking calls,we can go with sdbusplus asio now, but later when we have the asio implemenation in the libspdm, we need the support from sdbusplus or need to use the boost asio.",
      "parentUuid": "694f9fbd_56ab4a88",
      "revId": "526ee16d252ecdca860c5535e8f1ec92998fca52",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e09d9757_19d885e2",
        "filename": "src/spdmd_app.hpp",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-21T18:56:35Z",
      "side": 1,
      "message": "\u003e If we plan to replace it with sdbusplus::async, does sdbusplus::async provide support for MCTP socket communication?\n\u003e In MCTP-based communication with other devices, we rely on the in-kernel socket mechanism.\n\n`sdbusplus::async` works fine with file descriptors, which sockets are.  Jagpal was able to get it working with GPIO fairly easily.  We can build whatever we need there.\n\n\u003e Currently all the DMTF libspdm calls are blocking calls,we can go with sdbusplus asio now, but later when we have the asio implemenation in the libspdm, we need the support from sdbusplus or need to use the boost asio.\n\nI can\u0027t parse this.  What does libspdm being blocking have to do with {boost,sdbusplus}::asio vs sdbusplus::async?  To be clear we should use sdbusplus::async and not sdbusplus::asio.  I think you made a typo, but maybe not.\n\nHow are we going to use libspdm if it is blocking?  I would have thought the libspdm was like libpldm where it just helps with message pack/unpack operations.  Looking briefly at it, it looks like they are referencing \"libmctp\" but we aren\u0027t using \"libmctp\" anymore on OpenBMC.\n\nIf libspdm _is_ blocking, what is the plan for even integrating it here?  Are you planning on doing more development?  Are we going to run the libspdm interaction in a separate thread?  There are multiple directions and we should get alignment before we just start dropping code.\n\nCan we get some internal code design words from you rather than just code that I have to guess at where you\u0027re going?  I don\u0027t want to see you writing all kinds of code that is just going to be rejected because you\u0027re not aware of where the community has progressed in the last 3 years.",
      "parentUuid": "bc251168_7e2aa397",
      "revId": "526ee16d252ecdca860c5535e8f1ec92998fca52",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ffe037c1_fecc495c",
        "filename": "src/spdmd_app.hpp",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2025-05-23T08:18:14Z",
      "side": 1,
      "message": "Yes you are correct that I wanted to say the sdbusplus::async, Thanks for pointing it out.\n\n\u003e How are we going to use libspdm if it is blocking? I would have thought the libspdm was like libpldm where it just helps with message pack/unpack operations. Looking briefly at it, it looks like they are referencing \"libmctp\" but we aren\u0027t using \"libmctp\" anymore on OpenBMC.\n\nWe plan to use libspdm as it is for now, even though it\u0027s currently blocking. Since only one device will be sharing attestation data at a time, we’ll collect data from one device first, and then proceed to the next(Basically seralise).\n\nMoving forward, we are considering the following enhancements:\n\nCollect attestation data from each device in a separate thread.\nor\nEnhance libspdm itself to support asynchronous operations.\n\nOn that front(Enhancing libspdm), I’ve started a discussion with Steven Bellock (the maintainer of libspdm) to understand if there are any ongoing efforts or plans to support async operations in the library.\n\nAlso, just to clarify: libspdm is different from libpldm. While libpldm mainly handles message packing/unpacking, libspdm implements the full SPDM protocol stack, including state management and error handling.\n\n\u003e Can we get some internal code design words from you rather than just code that I have to guess at where you\u0027re going? I don\u0027t want to see you writing all kinds of code that is just going to be rejected because you\u0027re not aware of where the community has progressed in the last 3 years.\n\nI can put up the design doc, how I am planning to write the code.Do you want me to write the doc in the same repo?",
      "parentUuid": "e09d9757_19d885e2",
      "revId": "526ee16d252ecdca860c5535e8f1ec92998fca52",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cdc9a241_6790914c",
        "filename": "src/spdmd_app.hpp",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2025-05-23T11:04:16Z",
      "side": 1,
      "message": "\u003e \u003e How are we going to use libspdm if it is blocking? I would have thought the libspdm was like libpldm where it just helps with message pack/unpack operations. Looking briefly at it, it looks like they are referencing \"libmctp\" but we aren\u0027t using \"libmctp\" anymore on OpenBMC.\n\u003e \n\u003e We plan to use libspdm as it is for now, even though it\u0027s currently blocking. Since only one device will be sharing attestation data at a time, we’ll collect data from one device first, and then proceed to the next(Basically seralise).\n\u003e \n\nCan you explain what is blocking in libspdm ?\n\n\n\u003e Moving forward, we are considering the following enhancements:\n\u003e \n\u003e Collect attestation data from each device in a separate thread.\n\u003e or\n\u003e Enhance libspdm itself to support asynchronous operations.\n\u003e \n\u003e On that front(Enhancing libspdm), I’ve started a discussion with Steven Bellock (the maintainer of libspdm) to understand if there are any ongoing efforts or plans to support async operations in the library.\n\u003e \n\nI regularly attend the DMTF SPDM WG as well as the Code TF calls. I never heard any discussion on this. Was there an open/active issue on this ?",
      "parentUuid": "ffe037c1_fecc495c",
      "revId": "526ee16d252ecdca860c5535e8f1ec92998fca52",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93adabd3_7e1565b4",
        "filename": "src/spdmd_app.hpp",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2025-05-23T11:48:21Z",
      "side": 1,
      "message": "\u003eI regularly attend the DMTF SPDM WG as well as the Code TF calls. I never heard any discussion on this. Was there an open/active issue on this ?\n\nhttps://github.com/DMTF/libspdm/issues/2480\n\nHave you ever tried retrieving attestation data from multiple devices simultaneously?\n\nPlease take a look at the code snippet below. While it\u0027s specifically for the GetVersion command, this blocking behavior is common across all SPDM commands\n\nhttps://github.com/DMTF/libspdm/blob/main/library/spdm_requester_lib/libspdm_req_get_version.c#L40",
      "parentUuid": "cdc9a241_6790914c",
      "revId": "526ee16d252ecdca860c5535e8f1ec92998fca52",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea740d92_fa76f488",
        "filename": "src/spdmd_app.hpp",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2025-05-27T06:27:55Z",
      "side": 1,
      "message": "IMO, looking at the issue it appears to be nearly two years old, The working group doesn\u0027t seem opposed to the concept—in fact, they\u0027ve made some initial efforts toward addressing it at https://github.com/DMTF/libspdm/pull/2406. However, progress has stalled, likely due to limited bandwidth or prioritization. Given that libspdm has an active and engaged open community, I would rather recommend that we actively contribute to libspdm by progressively introducing asynchronous support for the relevant commands that we need. And in parallel, we can work on integrating those commands within OpenBMC. \n\nAt this stage, I believe a phased approach would be most effective. We should begin by leveraging `sdbusplus::async` infrastructure for our current needs. In parallel, we can contribute to progressively introducing asynchronous support within libspdm for various commands of interest for attestation one by one. This will allow us to integrate smoothly once we get async support in libspdm without blocking our current development efforts.\n\n@patrick - What\u0027s your opinion on this ?",
      "parentUuid": "93adabd3_7e1565b4",
      "revId": "526ee16d252ecdca860c5535e8f1ec92998fca52",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7889bcf2_87cebf78",
        "filename": "src/spdmd_app.hpp",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2025-05-27T07:54:23Z",
      "side": 1,
      "message": "\u003eWe should begin by leveraging sdbusplus::async infrastructure for our current needs.\n\nI’m unclear on how we’re expected to use libspdm in a non-blocking way without modifying it directly. My specific concern is around how all libspdm calls can be integrated into an asynchronous or concurrent flow.\n\nI had a discussion with Steven yesterday, and he confirmed that there is currently no ongoing effort to make the libspdm API asynchronous. He also mentioned that making the API async would involve a significant amount of work.\n\nAs a potential solution, I propose using a multi-threaded model, where each thread maintains its own spdm_context and independently handles a request. However, I haven’t come across any OpenBMC user-space applications that follow this multithreaded approach with libspdm. I have not protyped this approach, If we all are aligned, I can prototype this.\n\nProposed Options\n\nOption 1: Use libspdm as-is and serialize all SPDM requests\n\nAll requests are processed one at a time.\n\nLimitation: If the system has 10 devices, a user cannot retrieve attestation data from a device while another request is in progress.\n\nOption 2: Use a multi-threaded model\n\nEach request is handled by a dedicated worker thread, each with its own spdm_context.\n\nThis allows concurrent handling of requests, avoiding the bottleneck of serialization.\n\nOption 3: Modify libspdm to support async APIs\n\nRequires changes to the libspdm internals to support asynchronous operation.\n\nThis would provide more flexibility but involves a significant development effort.\n\nQuestion\n\nWhat approach should we proceed with?\n\nI’m leaning towards Option 2 (multithreaded model) as a balanced approach, offering concurrency without requiring deep changes to libspdm.",
      "parentUuid": "ea740d92_fa76f488",
      "revId": "526ee16d252ecdca860c5535e8f1ec92998fca52",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6768dc27_f45624d8",
        "filename": "src/spdmd_app.hpp",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1001516
      },
      "writtenOn": "2025-05-20T07:33:02Z",
      "side": 1,
      "message": "spdmRooTObjectPath in this commit. D-Bus object is added in ComponentIntegrity commit. I think this path can be removed from this commit.",
      "revId": "526ee16d252ecdca860c5535e8f1ec92998fca52",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0c64392_2e8ed7e0",
        "filename": "subprojects/boost.wrap",
        "patchSetId": 4
      },
      "lineNbr": 2,
      "author": {
        "id": 1001516
      },
      "writtenOn": "2025-05-20T07:33:02Z",
      "side": 1,
      "message": "Don\u0027t we need specific boot version?. In most of the openbmc app repos we have specific version called out and same is used in openbmc recipe.",
      "revId": "526ee16d252ecdca860c5535e8f1ec92998fca52",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}